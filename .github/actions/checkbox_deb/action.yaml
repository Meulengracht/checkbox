inputs:
  provision_data:
    description: "Target image and provisioning data (ex. `url:` or `distro:`)"
    required: false
    default: null
  queue:
    description: "Queue that will run the testing (ex. 202012-28526)"
    required: true
  test_plan:
    description: "Test plan to run (ex. com.canonical.certification::sru)"
    required: true
  match:
    description: "Subset of jobs to run (ex. .*wireless.*)"
    required: false
    default: ".*"
  launcher_override:
    description: "Launcher with additional values that will take priority over the defaults"
    default: ""
    required: false
  zapper_channel:
    description: "Zapper channel to be used, will be ignored if no Zapper (ex. edge, beta, stable)"
    required: false
    default: "beta"
  checkbox_risk:
    description: "Risk of the Checkbox snaps to install on the DUT (ex. edge, beta, stable)"
    required: true
  checkbox_frontend_name:
    description: "Name of the Checkbox frontend snap to install on the DUT (ex. checkbox[-project])"
    required: true
  checkbox_frontend_track:
    description: "Track of the Checkbox frontend snap to install on the DUT (ex. uc24, 22.04)"
    required: true
  checkbox_runtime_name:
    description: "Name of the Checkbox runtime snap to install on the DUT (ex. checkbox24)"
    required: true
runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      shell: bash
      run: |
        sudo apt install -y -qq gettext
    - name: Build test resource
      shell: bash
      env:
        INPUT_PROVISION_DATA: ${{ inputs.provision_data }}
        INPUT_QUEUE: ${{ inputs.queue }}
        INPUT_TEST_PLAN: ${{ inputs.test_plan }}
        INPUT_MATCH: ${{ inputs.match || '.*' }}
        INPUT_LAUNCHER_OVERRIDE: ${{ inputs.launcher_override }}
        INPUT_ZAPPER_CHANNEL: ${{ inputs.zapper_channel || 'beta' }}
        INPUT_CHECKBOX_RISK: ${{ inputs.checkbox_risk }}
      working-directory: ${{ github.action_path }}/../../../tools/lab_dispatch
      run: |
        echo "::group::Building the testflinger job"
        if [ -n "$INPUT_PROVISION_DATA" ]; then
          INPUT_PROVISION_DATA="provision_data: { $INPUT_PROVISION_DATA }"
        fi
        envsubst '
          $INPUT_QUEUE
          $INPUT_PROVISION_DATA
          $INPUT_CHECKBOX_RISK
          $INPUT_ZAPPER_CHANNEL
        ' < generic_deb.yaml | tee job.yaml
        echo "::endgroup::"

        echo "::group::Building the Checkbox launcher"
        # this goes from .template. (missing secret, testplan, match etc. to .partial.)
        # this is partial as some values are filled in on the agent (like wireless access points names)
        envsubst '$INPUT_TEST_PLAN $INPUT_MATCH' < resources/checkbox.no-manifest.template.conf | tee resources/checkbox.no-manifest.partial.conf
        echo "::endgroup::"

        echo "::group::Dumping launcher overrides"
        echo "$INPUT_LAUNCHER_OVERRIDE" | tee launcher_override.conf
        echo "::endgroup::"
    - name: Workaroud cwd
      shell: bash
      run: |
        # this allows us to dispatch the action and the attachments with relative
        # paths even when called form outside the Checkbox repo
        action_path=$(realpath ${{ github.action_path }}/../../../tools/)
        workdir_path=$(realpath tools/)
        if [ ! -e "$workdir_path" ]; then
          cp -rT "$action_path" "$workdir_path"
        fi
        if [ "$action_path" = "$workdir_path" ]; then
          echo "Skipping copy as the action is already running in workdir"
        else
          cp -rT "$action_path" "$workdir_path"
        fi
    - name: Submit and monitor job
      uses: canonical/testflinger/.github/actions/submit@main
      with:
        poll: true
        job-path: tools/lab_dispatch/job.yaml
