name: Submit a checkbox job to Testflinger (job provided inline)
on:
    push:
        branches: [CHECKBOX-1447-promotion-beta-to-candidate]
    workflow_dispatch:

jobs:
  checkbox-promotion-beta-to-candidate-test:
    runs-on: [self-hosted, testflinger]
    strategy:
      fail-fast: false
      matrix:
        include:
          - queue: hp-elitebook-850-g7-notebook-pc
            data_source: "distro: jammy"
            checkbox_runtime: checkbox22
            checkbox_track: uc22
          - queue: hp-elitebook-850-g7-notebook-pc
            data_source: "distro: jammy"
    steps:
    - name: Checkout checkbox monorepo
      uses: actions/checkout@v4

    - name: Submit job
      uses: canonical/testflinger/.github/actions/submit
      with:
        poll: true
        job: |
          job_queue: ${{ matrix.queue }}
          global_timeout: 3600
          output_timeout: 1800
          provision_data:
            ${{ matrix.data_source }}
          test_data:
            test_cmds: |
              #!/usr/bin/env bash

              set -x
          
              # input arguments
              CHECKBOX_RUNTIME=${{ matrix.checkbox_runtime }}
              CHECKBOX_TRACK=${{ matrix.checkbox_track }}
          
              # flag to indicate how Checkbox is installed on the device (snap or deb)
              [ -n "\$CHECKBOX_RUNTIME" ] && [ -n "\$CHECKBOX_TRACK" ] && SNAP_FLAG="true" || SNAP_FLAG="false"
          
              # constants
              CHANNEL=beta
              TOOLS_PATH=tools
          
              # agent pre-requisites
              # - psmisc provides `fuser`
              sudo apt-get -qq update
              sudo DEBIAN_FRONTEND=noninteractive apt-get -qq install -y git psmisc
          
              # retrieve all scripts/tools necessary from a repo
              curl -Ls -o installer.sh https://raw.githubusercontent.com/canonical/hwcert-jenkins-tools/installer/installer.sh
              source installer.sh \$TOOLS_PATH --branch CHECKBOX-1447-functionality
              add_to_path \$TOOLS_PATH/scriptlets
          
              # ensure device is available before continuing
              wait_for_ssh
              
              # install checkbox runtime on device (snap or deb)
              if [[ "\$SNAP_FLAG" == "true" ]]; then
                  echo "Installing checkbox runtime on device (from snap)"
                  _run_retry sudo snap install \$CHECKBOX_RUNTIME --no-wait --channel=latest/\$CHANNEL
                  wait_for_snap_complete
                  _run_retry sudo snap install checkbox --devmode --channel=\$CHECKBOX_TRACK/\$CHANNEL
                  # list all the installed snaps to facilitate debugging
                  _run snap list
                  CHECKBOX_CLI_CMD="checkbox.checkbox-cli"
              else
                  echo "Installing checkbox runtime on device (from deb package)"
                  _run sudo add-apt-repository -y ppa:checkbox-dev/\$CHANNEL
                  _run sudo apt-get -qq update
                  _run sudo DEBIAN_FRONTEND=noninteractive apt-get -qq install -y checkbox-*
                  # _run wait_for_pkg_complete
                  # list installed checkbox-related packages to facilitate debugging
                  _run "apt list --installed | grep checkbox"
                  CHECKBOX_CLI_CMD="checkbox-cli"
              fi
          
              if [[ \$(_run 'systemctl is-active *checkbox.agent.service') != "active" ]]; then
                  _run systemctl list-units --type=service
                  echo "Error: checkbox service not active on device"
                  # exit 1
              fi
          
              # install Checkbox on agent
              sudo add-apt-repository -y ppa:checkbox-dev/\$CHANNEL
              sudo apt-get -qq update
              sudo DEBIAN_FRONTEND=noninteractive apt-get -qq install -y checkbox-ng
              wait_for_pkg_complete
          
              # sync Checkbox version between agent and device    
              CHECKBOX_VERSION=\$(_run \$CHECKBOX_CLI_CMD --version)
              if [ -z "\$CHECKBOX_VERSION" ]; then
                echo "Error: Unable to retrieve Checkbox version from device"
                exit 1
              fi
              echo "Installing checkbox \$CHECKBOX_VERSION on agent container from source"
              install_checkbox_agent_source \$CHECKBOX_VERSION \$TOOLS_PATH
          
              # retrieve manifest
              MANIFEST_FILE=manifest.conf
              \$TOOLS_PATH/scriptlets/sru-helpers/fetch_manifest --manifest_file manifest.conf \$CID \$HEXR_DEVICE_SECURE_ID
              if [ \$? -ne 0 ]; then
                  echo "Using default manifest"
                  MANIFEST_FILE=\$TOOLS_PATH/tasks/checkbox-promotion/resources/manifest.conf
              fi
              # create checkbox launcher
              \$TOOLS_PATH/checkbox-config/stacker.py --output checkbox.conf \$TOOLS_PATH/tasks/checkbox-promotion/resources/testplan.conf \$MANIFEST_FILE
          
              # run the canary test plan
              PYTHONUNBUFFERED=1 checkbox-cli control \$DEVICE_IP checkbox.conf
              EXITCODE=\$?